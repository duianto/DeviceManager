{"version":3,"mappings":"iDAOa,MAAAA,EAAqB,MAAM,QAAQ,IAC9C,OAAO,OAAoD,8DAAAC,EAAA,iNAAAA,EAAA,kHAAAA,EAAA,wGAAAA,EAAA,mGAAAA,EAAA,oMAAAA,EAAA,4DAAE,IAAI,MAAMC,GACrEA,IAAO,KAAKC,GAAOA,EAAW,OAAO,CACvC,CACF,EAEaC,EAAwC,OAAO,YAC1DJ,EAAkB,QAAQK,GACxB,OAAO,QAAQA,EAAS,OAAO,EAAE,IAAI,CAAC,CAACC,EAAMC,CAAM,IAAM,CACvD,OAAOD,CAAI,EACX,CAAC,GAAGC,EAAQ,KAAM,OAAOD,CAAI,EAAG,SAAAD,CAAQ,EACzC,CACH,CACF,EAEaG,EAAuC,IAAI,IACtDR,EAAkB,WAChB,OAAO,QAAQK,EAAS,OAAO,EAAE,IAAI,CAAC,CAACC,EAAMC,CAAM,IAAM,CAACA,EAAO,QAAU,OAAOD,CAAI,CAAC,CAAU,GACjG,OAAO,CAAC,CAACG,CAAO,IAAMA,IAAY,MAAS,CAC/C,EAEaC,EAAmC,IAAI,IAClDV,EAAkB,QAChBK,GAAA,OAAO,QAAQA,EAAS,OAAO,EAAE,IAC/B,CAAC,CAACC,EAAMC,CAAM,IAAM,CAACA,EAAO,GAAK,CAAC,GAAGA,EAAQ,KAAM,OAAOD,CAAI,EAAG,SAAAD,EAAS,CAC5E,GACA,OAAO,CAAC,CAACM,CAAE,IAAMA,IAAO,MAAS,CACrC,EAEaC,MAAsB,IAAI,CACrC,CAAC,IAAK,EAAE,CACV,CAAC","names":["KEYMAP_CATEGORIES","__vitePreload","load","it","KEYMAP_CODES","category","code","action","KEYMAP_KEYCODES","keyCode","KEYMAP_IDS","id","specialKeycodes"],"sources":["../../../../../../src/lib/serial/keymap-codes.ts"],"sourcesContent":["import type {ActionInfo, KeymapCategory} from \"$lib/assets/keymaps/keymap\"\n\nexport interface KeyInfo extends Partial<ActionInfo> {\n  code: number\n  category: KeymapCategory\n}\n\nexport const KEYMAP_CATEGORIES = (await Promise.all(\n  Object.values(import.meta.glob(\"$lib/assets/keymaps/*.yml\")).map(async load =>\n    load().then(it => (it as any).default),\n  ),\n)) as KeymapCategory[]\n\nexport const KEYMAP_CODES: Record<number, KeyInfo> = Object.fromEntries(\n  KEYMAP_CATEGORIES.flatMap(category =>\n    Object.entries(category.actions).map(([code, action]) => [\n      Number(code),\n      {...action, code: Number(code), category},\n    ]),\n  ),\n)\n\nexport const KEYMAP_KEYCODES: Map<string, number> = new Map(\n  KEYMAP_CATEGORIES.flatMap(category =>\n    Object.entries(category.actions).map(([code, action]) => [action.keyCode!, Number(code)] as const),\n  ).filter(([keyCode]) => keyCode !== undefined),\n)\n\nexport const KEYMAP_IDS: Map<string, KeyInfo> = new Map(\n  KEYMAP_CATEGORIES.flatMap(category =>\n    Object.entries(category.actions).map(\n      ([code, action]) => [action.id!, {...action, code: Number(code), category}] as const,\n    ),\n  ).filter(([id]) => id !== undefined),\n)\n\nexport const specialKeycodes = new Map([\n  [\" \", 32], // Space\n])\n"],"file":"_app/immutable/chunks/keymap-codes.618d0a5c.js"}