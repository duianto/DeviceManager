{"version":3,"mappings":"qPAQA,SAASA,EAAWC,EAAU,GAAI,CAChC,KAAM,CACJ,UAAAC,EAAY,GACZ,cAAAC,EACA,eAAAC,EACA,aAAAC,EACA,eAAAC,EACA,gBAAAC,CACD,EAAGN,EACJ,IAAIO,EACAC,EACAC,EACJ,MAAMC,EAAsB,MAAOC,EAAc,KAAS,CACxD,MAAMH,EAEJ,MAAMC,IAAsB,CAElC,EACE,eAAeG,GAAW,CACxB,GAAI,kBAAmB,UAAW,CAChC,KAAM,CAAE,QAAAC,CAAS,EAAG,MAAKC,EAAA,IAAC,OAAO,uCAAgB,sBACjDP,EAAK,IAAIM,EAAQ,SAAU,CAAE,MAAO,IAAK,KAAM,SAAS,CAAE,EAC1DJ,EAAyB,SAAY,CACnC,MAAMF,GAAI,oBAClB,EAYe,CACL,IAAIQ,EAAsB,GAC1B,MAAMC,EAAwB,IAAM,CAClCD,EAAsB,GACtBR,GAAI,iBAAiB,cAAgBU,GAAU,CACzCA,EAAM,UACR,OAAO,SAAS,QAChC,CAAa,EACDf,KACZ,EACUK,EAAG,iBAAiB,YAAcU,GAAU,CACtC,OAAOA,EAAM,SAAa,IACxB,OAAOA,EAAM,WAAe,IAC1BA,EAAM,WACRD,IAEA,CAACD,GAAuBZ,MAEtBc,EAAM,WACR,OAAO,SAAS,SAEhB,CAACF,GAAuBZ,MAElBc,EAAM,UAChBd,KAEd,CAAW,EACDI,EAAG,iBAAiB,UAAWS,CAAqB,EACpDT,EAAG,iBAAiB,kBAAmBS,CAAqB,CAC7D,CAEHT,EAAG,SAAS,CAAE,UAAAN,CAAW,GAAE,KAAMiB,GAAM,CACjCb,EACFA,EAAe,SAAUa,CAAC,EAE1Bd,IAAec,CAAC,CAC1B,CAAO,EAAE,MAAOC,GAAM,CACdb,IAAkBa,CAAC,CAC3B,CAAO,CACF,CACF,CACD,OAAAX,EAAkBI,EAAQ,EACnBF,CACT,CAGA,SAASU,EAAcpB,EAAU,GAAI,CACnC,KAAM,CACJ,UAAAC,EAAY,GACZ,cAAAC,EACA,eAAAC,EACA,aAAAC,EACA,eAAAC,EACA,gBAAAC,CACD,EAAGN,EACEqB,EAAcC,EAAS,EAAK,EAC5BC,EAAeD,EAAS,EAAK,EAC7BZ,EAAsBX,EAAW,CACrC,UAAAE,EACA,gBAAiB,CACfsB,EAAa,IAAI,EAAI,EACrBpB,KACD,EACD,eAAgB,CACdkB,EAAY,IAAI,EAAI,EACpBnB,KACD,EACD,aAAAE,EACA,eAAAC,EACA,gBAAAC,CACJ,CAAG,EACD,MAAO,CACL,YAAAe,EACA,aAAAE,EACA,oBAAAb,CACJ,CACA,6QC7GEc,EAAsEC,EAAAC,EAAAC,CAAA,8TAJtEH,EAEAC,EAAAG,EAAAD,CAAA,oGAHGE,EAAY,UAAAC,KAIPD,EAAa,UAAAE,wPAPd,kBAAAV,EAAa,oBAAAX,EAAqB,aAAAa,GAAgBH,EAAa,0DAIzB,IAAAV,EAAoB,EAAI","names":["registerSW","options","immediate","onNeedRefresh","onOfflineReady","onRegistered","onRegisteredSW","onRegisterError","wb","registerPromise","sendSkipWaitingMessage","updateServiceWorker","_reloadPage","register","Workbox","__vitePreload","onNeedRefreshCalled","showSkipWaitingPrompt","event","r","e","useRegisterSW","needRefresh","writable","offlineReady","insert_hydration","target","div","anchor","button","ctx","create_if_block","create_if_block_1"],"sources":["../../../../../../../../../../../@vite-plugin-pwa/virtual:pwa-register/svelte","../../../../../../src/lib/components/PwaStatus.svelte"],"sourcesContent":["// src/client/build/svelte.ts\nimport { writable } from \"svelte/store\";\n\n// src/client/build/register.ts\nvar autoUpdateMode = \"false\";\nvar selfDestroying = \"false\";\nvar auto = autoUpdateMode === \"true\";\nvar autoDestroy = selfDestroying === \"true\";\nfunction registerSW(options = {}) {\n  const {\n    immediate = false,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  let wb;\n  let registerPromise;\n  let sendSkipWaitingMessage;\n  const updateServiceWorker = async (_reloadPage = true) => {\n    await registerPromise;\n    if (!auto) {\n      await sendSkipWaitingMessage?.();\n    }\n  };\n  async function register() {\n    if (\"serviceWorker\" in navigator) {\n      const { Workbox } = await import(\"workbox-window\");\n      wb = new Workbox(\"/sw.js\", { scope: \"/\", type: \"classic\" });\n      sendSkipWaitingMessage = async () => {\n        await wb?.messageSkipWaiting();\n      };\n      if (!autoDestroy) {\n        if (auto) {\n          wb.addEventListener(\"activated\", (event) => {\n            if (event.isUpdate || event.isExternal)\n              window.location.reload();\n          });\n          wb.addEventListener(\"installed\", (event) => {\n            if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n        } else {\n          let onNeedRefreshCalled = false;\n          const showSkipWaitingPrompt = () => {\n            onNeedRefreshCalled = true;\n            wb?.addEventListener(\"controlling\", (event) => {\n              if (event.isUpdate)\n                window.location.reload();\n            });\n            onNeedRefresh?.();\n          };\n          wb.addEventListener(\"installed\", (event) => {\n            if (typeof event.isUpdate === \"undefined\") {\n              if (typeof event.isExternal !== \"undefined\") {\n                if (event.isExternal)\n                  showSkipWaitingPrompt();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              } else {\n                if (event.isExternal)\n                  window.location.reload();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              }\n            } else if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n          wb.addEventListener(\"waiting\", showSkipWaitingPrompt);\n          wb.addEventListener(\"externalwaiting\", showSkipWaitingPrompt);\n        }\n      }\n      wb.register({ immediate }).then((r) => {\n        if (onRegisteredSW)\n          onRegisteredSW(\"/sw.js\", r);\n        else\n          onRegistered?.(r);\n      }).catch((e) => {\n        onRegisterError?.(e);\n      });\n    }\n  }\n  registerPromise = register();\n  return updateServiceWorker;\n}\n\n// src/client/build/svelte.ts\nfunction useRegisterSW(options = {}) {\n  const {\n    immediate = true,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  const needRefresh = writable(false);\n  const offlineReady = writable(false);\n  const updateServiceWorker = registerSW({\n    immediate,\n    onOfflineReady() {\n      offlineReady.set(true);\n      onOfflineReady?.();\n    },\n    onNeedRefresh() {\n      needRefresh.set(true);\n      onNeedRefresh?.();\n    },\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  });\n  return {\n    needRefresh,\n    offlineReady,\n    updateServiceWorker\n  };\n}\nexport {\n  useRegisterSW\n};\n","<script>\n  import {useRegisterSW} from \"virtual:pwa-register/svelte\"\n\n  const {needRefresh, updateServiceWorker, offlineReady} = useRegisterSW()\n</script>\n\n{#if $needRefresh}\n  <button title=\"Update ready\" on:click={() => updateServiceWorker(true)}\n    >Update <span class=\"icon\">update</span></button\n  >\n{:else if $offlineReady}\n  <div title=\"App can now be used offline\" class=\"icon\">offline_pin</div>\n{/if}\n\n<style lang=\"scss\">\n  button {\n    cursor: pointer;\n    color: var(--md-sys-color-on-background);\n    background: transparent;\n    border: none;\n  }\n</style>\n"],"file":"_app/immutable/chunks/PwaStatus.68502a98.js"}