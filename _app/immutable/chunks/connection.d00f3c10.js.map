{"version":3,"mappings":"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","names":["compressActions","actions","buffer","i","action","decompressActions","raw","LineBreakTransformer","chunk","controller","lines","line","SemVer","versionString","major","minor","patch","preRelease","meta","parsePhrase","phrase","_","stringifyPhrase","it","parseChordActions","deserializeActions","stringifyChordActions","serializeActions","native","PORT_FILTERS","KEY_COUNTS","__vitePreload","getViablePorts","ports","usbProductId","usbVendorId","filter","canAutoConnect","CharaDevice","baudRate","manual","info","serialLog","version","company","device","chipset","e","decoderStream","value","command","writer","callback","send","read","exec","resolve","result","commandString","count","index","chord","status","layer","id","position","type","persistentWritable","key","condition","persistedValue","store","writable","theme","userPreferences","preference","node","unsubscribe","update","serialPort","deviceChords","get","deviceLayout","deviceSettings","syncStatus","syncProgress","initSerial","chordCount","max","settingInfo","current","progressTick","parsedSettings","parsedLayout","chordInfo"],"sources":["../../../../../../src/lib/serialization/actions.ts","../../../../../../src/lib/serial/line-break-transformer.ts","../../../../../../src/lib/serial/sem-ver.ts","../../../../../../src/lib/serial/chord.ts","../../../../../../src/lib/serial/device.ts","../../../../../../src/lib/storage.ts","../../../../../../src/lib/preferences.ts","../../../../../../src/lib/serial/connection.ts"],"sourcesContent":["/**\n * Compresses an action list into a Uint8Array of variable-length 8/13-bit integers.\n *\n * Action codes <32 are invalid.\n */\nexport function compressActions(actions: number[]): Uint8Array {\n  const buffer = new Uint8Array(actions.length * 2)\n  let i = 0\n  for (const action of actions) {\n    if (action > 0xff) {\n      buffer[i++] = action >>> 8\n    }\n    buffer[i++] = action & 0xff\n  }\n  return buffer.slice(0, i)\n}\n\n/**\n * Decompresses actions\n *\n * @see {compressActions}\n */\nexport function decompressActions(raw: Uint8Array): number[] {\n  const actions: number[] = []\n  for (let i = 0; i < raw.length; i++) {\n    let action = raw[i]\n    if (action > 0 && action < 32) {\n      action = (action << 8) | raw[++i]\n    }\n    actions.push(action)\n  }\n  return actions\n}\n","export class LineBreakTransformer {\n  private chunks = \"\"\n\n  // noinspection JSUnusedGlobalSymbols\n  transform(chunk: string, controller: TransformStreamDefaultController) {\n    this.chunks += chunk\n    const lines = this.chunks.split(\"\\r\\n\")\n    this.chunks = lines.pop()!\n    for (const line of lines) {\n      controller.enqueue(line)\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  flush(controller: TransformStreamDefaultController) {\n    controller.enqueue(this.chunks)\n  }\n}\n","export class SemVer {\n  major: number\n  minor: number\n  patch: number\n  preRelease?: string\n  meta?: string\n\n  constructor(versionString: string) {\n    const [, major, minor, patch, preRelease, meta] =\n      /^([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?(?:\\+([0-9A-Za-z-]+))?$/.exec(\n        versionString,\n      )!\n    this.major = Number.parseInt(major)\n    this.minor = Number.parseInt(minor)\n    this.patch = Number.parseInt(patch)\n    if (preRelease) this.preRelease = preRelease\n    if (meta) this.meta = meta\n  }\n\n  toString() {\n    return (\n      `${this.major}.${this.minor}.${this.patch}` +\n      (this.preRelease ? `-${this.preRelease}` : \"\") +\n      (this.meta ? `+${this.meta}` : \"\")\n    )\n  }\n}\n","import {compressActions, decompressActions} from \"../serialization/actions\"\n\nexport interface Chord {\n  actions: number[]\n  phrase: number[]\n}\n\nexport function parsePhrase(phrase: string): number[] {\n  return decompressActions(\n    Uint8Array.from({length: phrase.length / 2}).map((_, i) =>\n      Number.parseInt(phrase.slice(i * 2, i * 2 + 2), 16),\n    ),\n  )\n}\n\nexport function stringifyPhrase(phrase: number[]): string {\n  return [...compressActions(phrase)]\n    .map(it => it.toString(16).padStart(2, \"0\"))\n    .join(\"\")\n    .toUpperCase()\n}\n\nexport function parseChordActions(actions: string): number[] {\n  return deserializeActions(BigInt(`0x${actions}`))\n}\n\nexport function stringifyChordActions(actions: number[]): string {\n  return serializeActions(actions).toString(16).padStart(32, \"0\").toUpperCase()\n}\n\n/**\n * Binary serialization of actions\n *\n * Actions are represented as 10-bit codes, for a maximum of 12 actions\n */\nexport function serializeActions(actions: number[]): bigint {\n  let native = 0n\n  for (let i = 1; i <= actions.length; i++) {\n    native |= BigInt(actions[actions.length - i] & 0x3ff) << BigInt((12 - i) * 10)\n  }\n  return native\n}\n\n/**\n * @see {serializeActions}\n */\nexport function deserializeActions(native: bigint): number[] {\n  const actions = []\n  for (let i = 0; i < 12; i++) {\n    const action = Number(native & 0x3ffn)\n    if (action !== 0) {\n      actions.push(action)\n    }\n    native >>= 10n\n  }\n\n  return actions\n}\n","import {LineBreakTransformer} from \"$lib/serial/line-break-transformer\"\nimport {serialLog} from \"$lib/serial/connection\"\nimport type {Chord} from \"$lib/serial/chord\"\nimport {SemVer} from \"$lib/serial/sem-ver\"\nimport {parseChordActions, parsePhrase, stringifyChordActions, stringifyPhrase} from \"$lib/serial/chord\"\nimport {browser} from \"$app/environment\"\n\nconst PORT_FILTERS: Map<string, SerialPortFilter> = new Map([\n  [\"ONE M0\", {usbProductId: 32783, usbVendorId: 9114}],\n  [\"LITE S2\", {usbProductId: 33070, usbVendorId: 12346}],\n  [\"LITE M0\", {usbProductId: 32796, usbVendorId: 9114}],\n  [\"X\", {usbProductId: 33163, usbVendorId: 12346}],\n])\n\nconst KEY_COUNTS = {\n  ONE: 90,\n  LITE: 67,\n  X: 256,\n} as const\n\nif (browser && navigator.serial === undefined && import.meta.env.TAURI_FAMILY !== undefined) {\n  await import(\"./tauri-serial\")\n}\n\nexport async function getViablePorts(): Promise<SerialPort[]> {\n  return navigator.serial.getPorts().then(ports =>\n    ports.filter(it => {\n      const {usbProductId, usbVendorId} = it.getInfo()\n      for (const filter of PORT_FILTERS.values()) {\n        if (filter.usbProductId === usbProductId && filter.usbVendorId === usbVendorId) {\n          return true\n        }\n      }\n      return false\n    }),\n  )\n}\n\nexport async function canAutoConnect() {\n  return getViablePorts().then(it => it.length === 1)\n}\n\nexport class CharaDevice {\n  private port!: SerialPort\n  private reader!: ReadableStreamDefaultReader<string>\n\n  private readonly abortController1 = new AbortController()\n  private readonly abortController2 = new AbortController()\n\n  private streamClosed!: Promise<void>\n\n  private lock?: Promise<true>\n\n  private readonly suspendDebounce = 100\n  private suspendDebounceId?: number\n\n  version!: SemVer\n  company!: \"CHARACHORDER\"\n  device!: \"ONE\" | \"LITE\" | \"X\"\n  chipset!: \"M0\" | \"S2\"\n  keyCount!: 90 | 67 | 256\n\n  get portInfo() {\n    return this.port.getInfo()\n  }\n\n  constructor(private readonly baudRate = 115200) {}\n\n  async init(manual = false) {\n    try {\n      const ports = await getViablePorts()\n      this.port =\n        !manual && ports.length === 1\n          ? ports[0]\n          : await navigator.serial.requestPort({filters: [...PORT_FILTERS.values()]})\n\n      await this.port.open({baudRate: this.baudRate})\n      const info = this.port.getInfo()\n      serialLog.update(it => {\n        it.push({\n          type: \"system\",\n          value: `Connected; ID: 0x${info.usbProductId?.toString(16)}; Vendor: 0x${info.usbVendorId?.toString(\n            16,\n          )}`,\n        })\n        return it\n      })\n      await this.port.close()\n\n      this.version = new SemVer(await this.send(\"VERSION\").then(([version]) => version))\n      const [company, device, chipset] = await this.send(\"ID\")\n      this.company = company as \"CHARACHORDER\"\n      this.device = device as \"ONE\" | \"LITE\" | \"X\"\n      this.chipset = chipset as \"M0\" | \"S2\"\n      this.keyCount = KEY_COUNTS[this.device]\n    } catch (e) {\n      alert(e)\n      console.error(e)\n      throw e\n    }\n  }\n\n  private async suspend() {\n    await this.reader.cancel()\n    await this.streamClosed.catch(() => {\n      /** noop */\n    })\n    this.reader.releaseLock()\n    await this.port.close()\n  }\n\n  private async wake() {\n    await this.port.open({baudRate: this.baudRate})\n    const decoderStream = new TextDecoderStream()\n    this.streamClosed = this.port.readable!.pipeTo(decoderStream.writable, {\n      signal: this.abortController1.signal,\n    })\n\n    this.reader = decoderStream\n      .readable!.pipeThrough(new TransformStream(new LineBreakTransformer()), {\n        signal: this.abortController2.signal,\n      })\n      .getReader()\n  }\n\n  private async internalRead() {\n    const {value} = await this.reader.read()\n    serialLog.update(it => {\n      it.push({\n        type: \"output\",\n        value: value!,\n      })\n      return it\n    })\n    return value!\n  }\n\n  /**\n   * Send a command to the device\n   */\n  private async internalSend(...command: string[]) {\n    const writer = this.port.writable!.getWriter()\n    try {\n      serialLog.update(it => {\n        it.push({\n          type: \"input\",\n          value: command.join(\" \"),\n        })\n        return it\n      })\n      await writer.write(new TextEncoder().encode(`${command.join(\" \")}\\r\\n`))\n    } finally {\n      writer.releaseLock()\n    }\n  }\n\n  async forget() {\n    await this.port.forget()\n  }\n\n  /**\n   * Read/write to serial port\n   */\n  async runWith<T>(\n    callback: (send: typeof this.internalSend, read: typeof this.internalRead) => T | Promise<T>,\n  ): Promise<T> {\n    while (this.lock) {\n      await this.lock\n    }\n    const send = this.internalSend.bind(this)\n    const read = this.internalRead.bind(this)\n    const exec = new Promise<T>(async resolve => {\n      let result!: T\n      try {\n        if (this.suspendDebounceId) {\n          clearTimeout(this.suspendDebounceId)\n        } else {\n          await this.wake()\n        }\n        result = await callback(send, read)\n      } finally {\n        delete this.lock\n        this.suspendDebounceId = setTimeout(() => {\n          // cannot be locked here as all the code until clearTimeout is sync\n          console.assert(this.lock === undefined)\n          this.lock = this.suspend().then(() => {\n            delete this.lock\n            delete this.suspendDebounceId\n            return true\n          })\n        }, this.suspendDebounce) as any\n        resolve(result)\n      }\n    })\n    this.lock = exec.then(() => true)\n    return exec\n  }\n\n  /**\n   * Send to serial port\n   */\n  async send(...command: string[]) {\n    return this.runWith(async (send, read) => {\n      await send(...command)\n      const commandString = command.join(\" \").replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")\n      return read().then(it => it.replace(new RegExp(`^${commandString} `), \"\").split(\" \"))\n    })\n  }\n\n  async getChordCount(): Promise<number> {\n    const [count] = await this.send(\"CML C0\")\n    return Number.parseInt(count)\n  }\n\n  /**\n   * Retrieves a chord by index\n   */\n  async getChord(index: number | number[]): Promise<Chord> {\n    const [actions, phrase] = await this.send(`CML C1 ${index}`)\n    return {\n      actions: parseChordActions(actions),\n      phrase: parsePhrase(phrase),\n    }\n  }\n\n  /**\n   * Retrieves the phrase for a set of actions\n   */\n  async getChordPhrase(actions: number[]): Promise<number[] | undefined> {\n    const [phrase] = await this.send(`CML C2 ${stringifyChordActions(actions)}`)\n    return phrase === \"2\" ? undefined : parsePhrase(phrase)\n  }\n\n  async setChord(chord: Chord) {\n    const [status] = await this.send(\n      \"CML\",\n      \"C3\",\n      stringifyChordActions(chord.actions),\n      stringifyPhrase(chord.phrase),\n    )\n    if (status !== \"0\") console.error(`Failed with status ${status}`)\n  }\n\n  async deleteChord(chord: Pick<Chord, \"actions\">) {\n    const status = await this.send(`CML C4 ${stringifyChordActions(chord.actions)}`)\n    console.log(status)\n    if (status.at(-1) !== \"2\") throw new Error(`Failed with status ${status}`)\n  }\n\n  /**\n   * Sets an action to the layout\n   * @param layer the layer (usually 1-3)\n   * @param id id of the key, refer to the individual device for where each key is\n   * @param action the assigned action id\n   */\n  async setLayoutKey(layer: number, id: number, action: number) {\n    const [status] = await this.send(`VAR B4 A${layer} ${id} ${action}`)\n    console.log(status)\n    if (status !== \"0\") throw new Error(`Failed with status ${status}`)\n  }\n\n  /**\n   * Gets the assigned action from the layout\n   * @param layer the layer (usually 1-3)\n   * @param id id of the key, refer to the individual device for where each key is\n   * @returns the assigned action id\n   */\n  async getLayoutKey(layer: number, id: number) {\n    const [position, status] = await this.send(`VAR B3 A${layer} ${id}`)\n    if (status !== \"0\") throw new Error(`Failed with status ${status}`)\n    return Number(position)\n  }\n\n  /**\n   * Permanently stores settings and layout to the device.\n   *\n   * CAUTION: Device may degrade prematurely above 10,000-25,000 commits.\n   *\n   * **This does not need to be called for chords**\n   */\n  async commit() {\n    const [status] = await this.send(\"VAR B0\")\n    if (status !== \"0\") throw new Error(`Failed with status ${status}`)\n  }\n\n  /**\n   * Sets a setting on the device.\n   *\n   * Settings are applied until the next reboot or loss of power.\n   * To permanently store the settings, you *must* call commit.\n   */\n  async setSetting(id: number, value: number) {\n    const [status] = await this.send(`VAR B2 ${id.toString(16).toUpperCase()} ${value}`)\n    if (status !== \"0\") throw new Error(`Failed with status ${status}`)\n  }\n\n  /**\n   * Retrieves a setting from the device\n   */\n  async getSetting(id: number): Promise<number> {\n    const [value, status] = await this.send(`VAR B1 ${id.toString(16).toUpperCase()}`)\n    if (status !== \"0\")\n      throw new Error(`Setting \"0x${id.toString(16)}\" doesn't exist (Status code ${status})`)\n    return Number(value)\n  }\n\n  /**\n   * Reboots the device\n   */\n  async reboot() {\n    await this.send(\"RST\")\n  }\n\n  /**\n   * Reboots the device to the bootloader\n   */\n  async bootloader() {\n    await this.send(\"RST BOOTLOADER\")\n  }\n\n  /**\n   * Resets the device\n   */\n  async reset(type: \"FACTORY\" | \"PARAMS\" | \"KEYMAPS\" | \"STARTER\" | \"CLEARCML\" | \"FUNC\") {\n    await this.send(`RST ${type}`)\n  }\n\n  /**\n   * Returns the current number of bytes available in SRAM.\n   *\n   * This is useful for debugging when there is a suspected heap or stack issue.\n   */\n  async getRamBytesAvailable(): Promise<number> {\n    return Number(await this.send(\"RAM\"))\n  }\n}\n","import type {Writable} from \"svelte/store\"\nimport {writable} from \"svelte/store\"\nimport {browser} from \"$app/environment\"\n\nexport function persistentWritable<T>(key: string, value: T, condition?: () => boolean): Writable<T> {\n  if (browser) {\n    const persistedValue = localStorage.getItem(key)\n    const store = persistedValue !== null ? writable(JSON.parse(persistedValue)) : writable(value)\n    store.subscribe(value => {\n      if (!condition || condition()) localStorage.setItem(key, JSON.stringify(value))\n    })\n\n    return store\n  } else {\n    return writable(value)\n  }\n}\n","import type { Action } from \"svelte/action\"\nimport { persistentWritable } from \"$lib/storage\"\n\nexport interface UserPreferences {\n  backup: boolean\n  autoConnect: boolean\n}\n\nexport const theme = persistentWritable(\"user-theme\", {\n  color: \"#6D81C7\",\n  mode: \"dark\" as \"light\" | \"dark\" | \"auto\",\n})\n\nexport const userPreferences = persistentWritable<UserPreferences>(\"user-preferences\", {\n  backup: false,\n  autoConnect: false,\n})\n\nexport const preference: Action<HTMLInputElement, keyof UserPreferences> = (node, key) => {\n  const unsubscribe = userPreferences.subscribe(it => {\n    node.checked = it[key]\n  })\n  function update() {\n    userPreferences.update(value => {\n      value[key] = node.checked\n      return value\n    })\n  }\n  node.addEventListener(\"input\", update)\n\n  return {\n    destroy() {\n      unsubscribe()\n      node.removeEventListener(\"input\", update)\n    },\n  }\n}\n","import {get, writable} from \"svelte/store\"\nimport {CharaDevice} from \"$lib/serial/device\"\nimport type {Chord} from \"$lib/serial/chord\"\nimport type {Writable} from \"svelte/store\"\nimport type {CharaLayout} from \"$lib/serialization/layout\"\nimport {persistentWritable} from \"$lib/storage\"\nimport {userPreferences} from \"$lib/preferences\"\nimport settingInfo from \"$lib/assets/settings.yml\"\n\nexport const serialPort = writable<CharaDevice | undefined>()\n\nexport interface SerialLogEntry {\n  type: \"input\" | \"output\" | \"system\"\n  value: string\n}\n\nexport const serialLog = writable<SerialLogEntry[]>([])\n\n/**\n * Chords as read from the device\n */\nexport const deviceChords = persistentWritable<Chord[]>(\n  \"chord-library\",\n  [],\n  () => get(userPreferences).backup,\n)\n\n/**\n * Layout as read from the device\n */\nexport const deviceLayout = persistentWritable<CharaLayout>(\n  \"layout\",\n  [[], [], []],\n  () => get(userPreferences).backup,\n)\n\n/**\n * Settings as read from the device\n */\nexport const deviceSettings = persistentWritable<number[]>(\n  \"device-settings\",\n  [],\n  () => get(userPreferences).backup,\n)\n\nexport const syncStatus: Writable<\"done\" | \"error\" | \"downloading\" | \"uploading\"> = writable(\"done\")\n\nexport interface ProgressInfo {\n  max: number\n  current: number\n}\nexport const syncProgress = writable<ProgressInfo | undefined>(undefined)\n\nexport async function initSerial(manual = false) {\n  const device = get(serialPort) ?? new CharaDevice()\n  await device.init(manual)\n  serialPort.set(device)\n  const chordCount = await device.getChordCount()\n  syncStatus.set(\"downloading\")\n\n  const max = Object.keys(settingInfo.settings).length + device.keyCount * 3 + chordCount\n  let current = 0\n  syncProgress.set({max, current})\n  function progressTick() {\n    current++\n    syncProgress.set({max, current})\n  }\n\n  const parsedSettings: number[] = []\n  for (const key in settingInfo.settings) {\n    try {\n      parsedSettings[Number.parseInt(key)] = await device.getSetting(Number.parseInt(key))\n    } catch {}\n    progressTick()\n  }\n  deviceSettings.set(parsedSettings)\n\n  const parsedLayout: CharaLayout = [[], [], []]\n  for (let layer = 1; layer <= 3; layer++) {\n    for (let i = 0; i < device.keyCount; i++) {\n      parsedLayout[layer - 1][i] = await device.getLayoutKey(layer, i)\n      progressTick()\n    }\n  }\n  deviceLayout.set(parsedLayout)\n\n  const chordInfo = []\n  for (let i = 0; i < chordCount; i++) {\n    chordInfo.push(await device.getChord(i))\n    progressTick()\n  }\n  deviceChords.set(chordInfo)\n  syncStatus.set(\"done\")\n  syncProgress.set(undefined)\n}\n"],"file":"_app/immutable/chunks/connection.d00f3c10.js"}